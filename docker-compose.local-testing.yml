version: '3.8'
services:

  db:
    image: postgres:14
    container_name: db_container
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 2s
      timeout: 2s
      retries: 5
    restart: on-failure
    volumes:
      - postgresql_volume_compose:/var/lib/postgresql/data
      - ./etl/etl/dump.sql:/docker-entrypoint-initdb.d/dump.sql
    ports:
      - "5432:5432"

  redis:
    image: redis:7.0.7
    container_name: redis_container
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - redis_volume:/data
    ports:
      - "6379:6379"

  elastic:
    image: elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - USE_SSL=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    container_name: elastic_compose
    ports:
      - "9200:9200"
    volumes:
      - elastic_volume_compose:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.5.3
    environment:
      - ELASTICSEARCH_HOSTS=["http://elastic:9200"]
    ports:
      - "5601:5601"
    container_name: kibana_compose
    volumes:
      - kibana_volume_compose:/usr/share/kibana/data
    depends_on:
      elastic:
        condition: service_healthy
    restart: unless-stopped

  etl:
    build:
      context: ./etl/etl
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
      elastic:
        condition: service_healthy
    container_name: etl_container
    restart: unless-stopped
    entrypoint: sh -c "python etl.py"

#  fastapi:
#    build:
#      context: ./fastapi
#    image: fastapi-image
#    env_file:
#      - ./.env
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      elastic:
#        condition: service_healthy
#    container_name: fastapi_container
#    restart: unless-stopped
#    entrypoint: sh -c "uvicorn main:app --host 0.0.0.0 --port 8001"
#    ports:
#      - "8001:8001"

volumes:
  postgresql_volume_compose:
  redis_volume:
  elastic_volume_compose:
  kibana_volume_compose:
